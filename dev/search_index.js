var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Llama2Inference","category":"page"},{"location":"#Llama2Inference","page":"Home","title":"Llama2Inference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Llama2Inference.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Llama2Inference]","category":"page"},{"location":"#Llama2Inference.get_most_common_pair-Tuple{Vector{Int64}}","page":"Home","title":"Llama2Inference.get_most_common_pair","text":"get_most_common_pair(vocab_ids::Vector{Int})\n\nGet the most common consecutive pair of vocabulary IDs in the training data.\n\nArguments\n\nvocab_ids::Vector{Int}: Vector of the trainings text's vocabulary IDs.\n\nReturns\n\ntop_pair::Tuple{Int, Int}, max_count::Int: Tuple containing the most common pair and its count.\n\nCalls\n\ncount_consecutive : Gets the dictionary containing number of occurrences of each consecutive pairs.\n\nExamples\n\ntext = \"hello\" tokenizer = Tokenizer(text) toppair, maxcount = getmostcommonpair(tokenizer.vocabids)\n\n\n\n\n\n","category":"method"},{"location":"#Llama2Inference.replace_top_pair!-Tuple{Vector{Int64}, OrderedCollections.OrderedDict{Int64, Vector{UInt8}}}","page":"Home","title":"Llama2Inference.replace_top_pair!","text":"replace_top_pair!(vocab_ids::Vector{Int}, vocab::OrderedDict{Int, Vector{UInt8}})\n\nReplaces the 20 most common consecutive pairs with a new vocabulary ID.\n\nArguments\n\nvocab_ids::Vector{Int}: Vector of the trainings text's vocabulary IDs.\nvocab::OrderedDict{Int, Vector{UInt8}}: Ordered dictionary mapping IDs to vocabulary bytes.\n\nCalls\n\nget_most_common_pair : Gets the most common pair.\n\nExamples\n\ntext = \"hello\" tokenizer = Tokenizer(text) replacetoppair!(tokenizer.vocab_ids, tokenizer.vocab)\n\n\n\n\n\n","category":"method"},{"location":"#Llama2Inference.rmsnorm!-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"Llama2Inference.rmsnorm!","text":"rmsnorm!(out::Array{T, 1}, x::Array{T,1}, weight::Array{T,1}) where T<:AbstractFloat\n\nnormalize out in place by the root mean square of x and multiply by the learned weights weight.\n\n\n\n\n\n","category":"method"},{"location":"#Llama2Inference.softmax!-Union{Tuple{AbstractVector{T2}}, Tuple{T2}} where T2<:AbstractFloat","page":"Home","title":"Llama2Inference.softmax!","text":"softmax!(x::T{T2,1}) where {T<:AbstractArray, T2<:AbstractFloat}\n\nsoftmax the values in x in place, up to position pos inclusively.\n\n\n\n\n\n","category":"method"}]
}
